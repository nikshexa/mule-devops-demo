trigger:
  batch: true
  branches:
    include:
    - dev
  paths:
    exclude:
    - azure-pipelines.yml
    - pom.xml

pool:
  vmImage: 'ubuntu-latest'
variables:
- group: Build-Variable-Group
- name: MAVEN_CACHE_FOLDER
  value: $(Pipeline.Workspace)/.m2/repository
- name: MAVEN_OPTS
  value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'IZ Analyzer'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'dns-azure-devops-mule-demo'
    cliProjectName: 'D&S Azure Devops Mule demo'
    cliSources: '.'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.exclusions=target/**/*, reports/**/*
      sonar.organization=azure-devops-dns-demo
      
- task: SonarQubeAnalyze@5
  inputs:
    jdkversion: 'JAVA_HOME_11_X64'
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
    
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $sonarQubeProjectKey = 'dns-azure-devops-mule-demo'
      $sonarQubeUrl = 'https://analyzer.integralzone.com'
      
      $qualityGateStatus = Invoke-RestMethod -Uri "$sonarQubeUrl/api/qualitygates/project_status?projectKey=$sonarQubeProjectKey&branch=dev"
      
      if ($qualityGateStatus.projectStatus.status -eq 'ERROR') {
        Write-Host "Quality Gate failed. Deployment can't proceed."
        exit 1  # Fail the release pipeline
      }
      else {
        Write-Host "Quality Gate passed. Deployment can proceed."
      }    

- script: |
    # Run your MUnit tests and generate a coverage report
    mvn clean test -Dmunit.coverage.report.format=html
  displayName: 'Run MUnit Tests and Generate Coverage Report'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/target/site/munit/coverage/hello-mule-api-report.html'
    artifact: 'munit-coverage'
  displayName: 'Publish Coverage Report Artifact'

- script: |
    echo "##vso[task.prependpath]/artifact/munit-coverage"
  displayName: 'Set Coverage Report Link'

- script: |
    echo "Coverage Report: [View Report](/artifact/munit-coverage/index.html)"
  displayName: 'Display Coverage Report Link'

- task: CacheBeta@0
  inputs:
    key: $(Build.SourcesDirectory)/pom.xml
    path: $(MAVEN_CACHE_FOLDER)
  displayName: Cache Maven local repo

- task: DownloadSecureFile@1
  name: settingsxml
  inputs:
    secureFile: 'settings.xml'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"
      
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    mavenAuthenticateFeed: true
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    effectivePomSkip: true
    sonarQubeRunAnalysis: false
    #goals: 'clean install package deploy $(MAVEN_OPTS)  -DmuleDeploy -Dserver=$(server) -Denvironment=$(environment) -Dworker=$(worker) -DworkerType=$(workerType) -Dapp.runtime=$(app.runtime) -Dapp.name=$(app.name)'
    goals: 'clean install package $(MAVEN_OPTS)  -DmuleDeploy -Denv=$(env) -DskipTests=false -Dworker=$(deployment.workers) -DworkerType=$(deployment.workerType) -Dapp.runtime=$(app.runtime) -Dapp.name=$(app.name) -DconnectedApp.clientId=$(connectedApp.clientId) -DconnectedApp.clientSecret=$(connectedApp.clientSecret) -DconnectedApp.grantType=$(connectedApp.grantType)'
  displayName: 'Run Maven Build'
  
  
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'mule-Release'
    publishLocation: 'pipeline'